import type * as Capabilities from '@wdio/types/src/Capabilities.js';
import type * as Clients from '@wdio/types/src/Clients.js';
import type * as Options from '@wdio/types/src/Options.js';
import type * as Services from '@wdio/types/src/Services.js';
import type * as Reporters from '@wdio/types/src/Reporters.js';
import type * as Frameworks from '@wdio/types/src/Frameworks.js';
import type * as Workers from '@wdio/types/src/Workers.js';
export type { Capabilities, Clients, Options, Services, Frameworks, Reporters, Workers };
export type JsonPrimitive = string | number | boolean | null;
export type JsonObject = {
    [x: string]: JsonPrimitive | JsonObject | JsonArray;
};
export type JsonArray = Array<JsonPrimitive | JsonObject | JsonArray>;
export type JsonCompatible = JsonObject | JsonArray;
export type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;
export type ThenArg<T> = T extends PromiseLike<infer U> ? U : T;
interface DriverOptions {
    /**
     * directory where browser and driver should be stored
     */
    cacheDir?: string;
    /**
     * path to custom driver binary
     */
    binary?: string;
    /**
    * path to the log file
    */
    logPath?: string;
}
declare global {
    namespace WebdriverIO {
        interface MochaOpts {
            [key: string]: any;
        }
        interface JasmineOpts {
            [key: string]: any;
        }
        interface CucumberOpts {
            [key: string]: any;
        }
        interface ServiceOption extends Services.ServiceOption {
        }
        interface ReporterOption extends Reporters.Options {
        }
        interface Config extends Options.Testrunner {
        }
        interface HookFunctionExtension {
        }
        interface WDIODevtoolsOptions {
        }
        interface WDIOVSCodeServiceOptions {
        }
        interface BrowserRunnerOptions {
        }
        interface ChromedriverOptions extends DriverOptions {
        }
        interface GeckodriverOptions extends DriverOptions {
        }
        interface EdgedriverOptions extends DriverOptions {
        }
        interface SafaridriverOptions {
        }
    }
}
//# sourceMappingURL=index.d.ts.map